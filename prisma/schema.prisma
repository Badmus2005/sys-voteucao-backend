generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum DelegueType {
  PREMIER
  DEUXIEME
}

enum Role {
  ETUDIANT
  ADMIN
}

enum ElectionType {
  SALLE
  ECOLE
  UNIVERSITE
}

model User {
  id                   String   @id @default(cuid())
  email                String   @unique
  password             String
  role                 Role     @default(ADMIN)
  createdAt            DateTime @default(now())
  actif                Boolean @default(true)
  tempPassword         String?
  requirePasswordChange Boolean @default(false)
  passwordResetExpires DateTime?

  etudiant             Etudiant? @relation("UserToEtudiant")
  admin                Admin?    @relation("UserToAdmin")
  votes                Vote[]
  candidates           Candidate[]
  generatedCodes       RegistrationCode[] @relation("GeneratedCodes")
  usedRegistrationCode RegistrationCode?  @relation("UsedCodes")
  voteTokens           VoteToken[]
  activityLogs         ActivityLog[] @relation("UserActivityLogs")
  notifications        Notification[]
}

model Etudiant {
  id              Int     @id @default(autoincrement())
  userId          String? @unique
  matricule       String? @unique
  codeInscription String? @unique
  identifiantTemporaire String? @unique
  nom             String?
  prenom          String?
  filiere         String?
  annee           Int?
  photoUrl        String?
  ecole           String?
  user            User?   @relation("UserToEtudiant", fields: [userId], references: [id])
  responsableSalle ResponsableSalle[]
}

model Election {
  id          Int         @id @default(autoincrement())
  type        ElectionType
  titre       String
  description String?
  dateDebut   DateTime
  dateFin     DateTime
  createdAt   DateTime    @default(now())
  filiere     String?
  annee       Int?
  ecole       String?
  niveau      Int
  delegueType DelegueType?
  isActive    Boolean     @default(true)

  candidates  Candidate[]
  votes       Vote[]
  voteTokens  VoteToken[]
}

model Candidate {
  id         Int       @id @default(autoincrement())
  nom        String
  prenom     String
  program    String?
  photoUrl   String?
  userId     String
  electionId Int
  createdAt  DateTime @default(now())

  election   Election  @relation(fields: [electionId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  votes      Vote[]
}

model Vote {
  id          Int       @id @default(autoincrement())
  userId      String
  electionId  Int
  candidateId Int
  createdAt   DateTime  @default(now())
  poidsVote   Float

  user        User      @relation(fields: [userId], references: [id])
  election    Election  @relation(fields: [electionId], references: [id])
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@unique([userId, electionId])
}

model ResponsableSalle {
  id         Int      @id @default(autoincrement())
  etudiantId Int
  filiere    String
  annee      Int
  ecole      String
  createdAt  DateTime @default(now())

  etudiant   Etudiant @relation(fields: [etudiantId], references: [id])
  delegueEcole DelegueEcole[]

  @@unique([etudiantId, annee])
}

model DelegueEcole {
  id              Int      @id @default(autoincrement())
  responsableId   Int
  typeDelegue     DelegueType
  ecole           String
  createdAt       DateTime @default(now())

  responsable     ResponsableSalle @relation(fields: [responsableId], references: [id])
  delegueUniversitaire DelegueUniversite[]

  @@unique([responsableId, typeDelegue, ecole])
}

model DelegueUniversite {
  id            Int      @id @default(autoincrement())
  delegueEcoleId Int
  typeDelegue   DelegueType
  createdAt     DateTime @default(now())

  delegueEcole  DelegueEcole @relation(fields: [delegueEcoleId], references: [id])
}

model Admin {
  id      Int    @id @default(autoincrement())
  userId  String @unique
  nom     String
  prenom  String
  poste   String
  email   String

  user    User   @relation("UserToAdmin", fields: [userId], references: [id])
}

model RegistrationCode {
  id          String   @id @default(cuid())
  code        String   @unique
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  used        Boolean  @default(false)
  usedAt      DateTime?

  generatedBy String
  usedBy      String? @unique

  generatedByUser User @relation("GeneratedCodes", fields: [generatedBy], references: [id], onDelete: Cascade)
  usedByUser      User? @relation("UsedCodes", fields: [usedBy], references: [id], onDelete: Cascade)

  @@map("registration_codes")
}

model VoteToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  userId      String
  electionId  Int
  isUsed      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  usedAt      DateTime?

  user        User      @relation(fields: [userId], references: [id])
  election    Election  @relation(fields: [electionId], references: [id])

  @@unique([userId, electionId])
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  action    String
  details   String?
  userId    String?
  createdAt DateTime @default(now())

  user      User?    @relation("UserActivityLogs", fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String
  priority  String
  read      Boolean  @default(false)
  relatedEntity String?
  entityId  String?

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@index([userId, read])
}
