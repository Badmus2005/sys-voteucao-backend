// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  email             String            @unique
  password          String
  role              Role              @default(ADMIN)
  createdAt         DateTime          @default(now())

  // Relations
  etudiant          Etudiant?         @relation("UserToEtudiant")
  admin             Admin?            @relation("UserToAdmin")
  votes             Vote[]
  candidates        Candidate[]
  generatedCodes    RegistrationCode[] @relation("UserGeneratedCodes")
  usedRegistrationCode RegistrationCode? @relation("UserUsedCode")
  voteTokens        VoteToken[]
  activityLogs      ActivityLog[]      @relation("UserActivityLogs")
}

model Etudiant {
  id              Int     @id @default(autoincrement())
  userId          Int?    @unique
  matricule       String? @unique
  codeInscription String? @unique
  nom             String?
  prenom          String?
  filiere         String?
  annee           Int?
  photoUrl        String?

  user            User?   @relation("UserToEtudiant", fields: [userId], references: [id])
}

model Admin {
  id      Int    @id @default(autoincrement())
  userId  Int    @unique
  nom     String
  prenom  String
  poste   String

  user    User   @relation("UserToAdmin", fields: [userId], references: [id])
}

model Election {
  id          Int         @id @default(autoincrement())
  type        ElectionType
  titre       String
  description String?
  dateDebut   DateTime
  dateFin     DateTime
  filiere     String?
  annee       Int?
  ecole       String?
  isActive    Boolean     @default(true)
  
  candidates  Candidate[]
  votes       Vote[]
  voteTokens  VoteToken[]
}

model Candidate {
  id         Int       @id @default(autoincrement())
  nom        String
  prenom     String
  program    String?
  photoUrl   String?
  userId     Int
  electionId Int
  
  election   Election  @relation(fields: [electionId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  votes      Vote[]
}

model Vote {
  id          Int       @id @default(autoincrement())
  userId      Int
  electionId  Int
  candidateId Int
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
  election    Election  @relation(fields: [electionId], references: [id])
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@unique([userId, electionId])
}

model RegistrationCode {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
  generatedBy Int?
  usedById    Int?     @unique

  // Relations avec noms explicites
  generatedByUser User? @relation("UserGeneratedCodes", fields: [generatedBy], references: [id])
  usedByUser     User?  @relation("UserUsedCode", fields: [usedById], references: [id])
}

model VoteToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  userId      Int
  electionId  Int
  isUsed      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  usedAt      DateTime?

  user        User      @relation(fields: [userId], references: [id])
  election    Election  @relation(fields: [electionId], references: [id])

  @@unique([userId, electionId])
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  action    String
  details   String?
  userId    Int?
  createdAt DateTime @default(now())

  user      User?    @relation("UserActivityLogs", fields: [userId], references: [id])
}

enum Role {
  ETUDIANT
  ADMIN
}

enum ElectionType {
  SALLE
  ECOLE
  UNIVERSITE
}